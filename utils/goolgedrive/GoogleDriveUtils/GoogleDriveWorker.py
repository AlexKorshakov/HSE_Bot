from __future__ import print_function

import os
import pickle
import subprocess

from aiogram import types
from loguru import logger

from data.config import SERVICE_ACCOUNT_FILE, WORK_PATH
from loader import bot
from messages.messages import Messages

INSTALL_REQUIRES = ['google-api-core',
                    'google-api-python-client',
                    'google-auth-httplib2',
                    'google-auth-oauthlib',
                    'googleapis-common-protos',
                    'httplib2',
                    ]


def prepare_venv():
    """ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ / —Å–æ–∑–¥–∞–Ω–∏–µ / –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ venv —Å –ø–æ–º–æ—â—å—é subprocess.call
        —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ü–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt
    """
    app_venv_name = "venv"

    if not os.path.exists(app_venv_name):
        os.makedirs(f"{app_venv_name}")
    # upgrade pip
    subprocess.call(['pip', 'install', '--upgrade', 'pip'])
    # update requirements.txt and upgrade venv
    subprocess.call(['pip', 'install', '--upgrade'] + INSTALL_REQUIRES)


try:
    from googleapiclient.discovery import build
    import httplib2
    from google.oauth2 import service_account
except Exception as err:
    logger.error(f"*** google api client error {err} ***")
    prepare_venv()

logger.info("V 0.043 master GoogleDriveWorker")

SCOPE_DRIVE = "https://www.googleapis.com/auth/drive"

SCOPE_DRIVE_APPDATA = "https://www.googleapis.com/auth/drive.appdata"
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ Google Drive, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–ª–∏ —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
SCOPE_DRIVE_FILE = "https://www.googleapis.com/auth/drive.file"

SCOPES = [SCOPE_DRIVE,
          SCOPE_DRIVE_APPDATA,
          SCOPE_DRIVE_FILE
          ]
PICKLE_PATH = '.\\utils\\goolgedrive\\token.pickle'


async def drive_account_credentials(message: types.Message) -> object:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Google
    :param delegate_user: - –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    :param service_account_file: - —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    :return:
    @rtype: object
    """
    credentials = None
    # –§–∞–π–ª token.pickle —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    if os.path.exists(WORK_PATH + PICKLE_PATH):
        with open(WORK_PATH + PICKLE_PATH, 'rb') as token:
            credentials = pickle.load(token)

    if not credentials:
        # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
        credentials = service_account.Credentials.from_service_account_file(
            filename=SERVICE_ACCOUNT_FILE,
            scopes=SCOPES)

        with open(WORK_PATH + PICKLE_PATH, 'wb') as token:
            pickle.dump(credentials, token)

    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ
    http_auth = credentials.authorize(httplib2.Http())

    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—É —Å Google Drive –∏ 3 –≤–µ—Ä—Å–∏—é API
        google_drive_service = build('drive', 'v3', http=http_auth)
        logger.info("–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
        logger.info("üîí **Already authorized your Google Drive Account.**")
        return google_drive_service

    except Exception as err:
        logger.info(f"–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞! : {repr(err)} ")
        await bot.send_message(message.from_user.id, text=Messages.err_authorized_google_drive)
        assert "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"


async def drive_account_auth_with_oauth2client(message):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Google
    :param delegate_user: - –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    :param service_account_file: - —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    :return:
    @rtype: object
    """
    google_drive_service = await drive_account_credentials(message)
    return google_drive_service


async def move_file(service: object, id: str, add_parents: str, remove_parents: str) -> None:
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –∏–∑ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –¥—Ä—É–≥—É—é
    @param remove_parents:
    @param add_parents:
    @param service:
    @param id:
    """
    try:
        serv = service.files()
        serv.update(fileId=id, addParents=add_parents, removeParents=remove_parents).execute()
    except Exception as err:
        logger.error(f"move_folder err {id} to move in add_parents \n: {repr(err)}")
